name: Secret Scanning (TruffleHog with Inline Annotations + PR Comment)

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog (Diff scan with inline annotations)
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: .
          base: "${{ github.event.repository.default_branch }}"
          head: HEAD
          extra_args: --debug

      # üî• PR comment summary (MASKED OUTPUT) ‚Äî no reports stored
      - name: Comment on PR with masked summary
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        env:
          TRUFFLEHOG_RAW: ${{ steps.trufflehog.outputs.json }}
        with:
          script: |
            const raw = process.env.TRUFFLEHOG_RAW || '';
            if (!raw.trim()) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "‚úÖ **TruffleHog Scan Completed ‚Äî No secrets detected.**"
              });
              return;
            }

            const lines = raw.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
            const findings = lines.map(l => {
              try { return JSON.parse(l); } catch { return null; }
            }).filter(Boolean);

            if (findings.length === 0) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "‚úÖ **TruffleHog Scan Completed ‚Äî No secrets detected.**"
              });
              return;
            }

            let summary = `üö® **TruffleHog detected ${findings.length} potential secret(s).**\n\n`;
            summary += "| File | Line | Type | Masked Value |\n|---|---|---|---|\n";

            for (const f of findings.slice(0, 20)) {
              const file = f.Path || f.File || "unknown";
              const line = f.Line || f.StartLine || 1;
              const type = f.DetectorName || f.Rule || "Secret";
              let masked = "***";
              if (f.Redacted) masked = f.Redacted;
              else if (f.Raw) masked = String(f.Raw).slice(0, 3) + "***" + String(f.Raw).slice(-3);
              summary += `| \`${file}\` | ${line} | \`${type}\` | \`${masked}\` |\n`;
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: summary + "\n‚ö†Ô∏è **Review immediately and remove any real secrets.**"
            });

      # ‚ùå Fail CI if TruffleHog returned outcome=failure
      - name: Fail if secrets found
        if: steps.trufflehog.outcome == 'failure'
        run: exit 1
